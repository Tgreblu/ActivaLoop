<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ActivaLoop</title>
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#2563eb"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type=number] { -moz-appearance: textfield; }
        #loading-overlay {
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(255, 255, 255, 0.9); display: flex;
            align-items: center; justify-content: center; z-index: 50;
            transition: opacity 0.3s;
        }
        .details-summary::-webkit-details-marker { display: none; }
        .details-summary { list-style: none; }
    </style>
</head>
<body class="bg-gray-100 flex justify-center items-start min-h-screen p-4 sm:p-8">

    <div id="main-wrapper" class="w-full max-w-[600px] space-y-4">
        
        <div id="loading-overlay">
            <p id="loading-text" class="text-gray-600">Sincronizzazione dati...</p>
        </div>
        
        <!-- Blocco Superiore: Timer -->
        <div id="timer-block" class="bg-white rounded-2xl shadow-xl p-10 border border-gray-200 relative">
            <div id="auth-container" class="absolute top-4 right-4 text-sm z-10"></div>
            <div class="text-center">
                <h1 id="exercise-title" class="text-3xl font-bold text-gray-800 min-h-[5rem] flex items-center justify-center">ActivaLoop</h1>
                <div id="countdown-container" class="my-2">
                     <p id="countdown-display" class="text-7xl font-bold text-blue-600">00:00</p>
                </div>
                <div class="flex justify-center items-center space-x-4 mb-2">
                    <button id="back-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                    <button id="start-pause-btn" class="w-32 text-xl font-semibold py-3 px-6 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-200 shadow-md">START</button>
                    <button id="next-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                </div>
                <p class="text-sm text-gray-500 h-5">Prossimo: <span id="next-exercise-label"></span></p>
            </div>
        </div>

        <!-- Blocco Inferiore: Sequenze -->
        <div id="sequences-block" class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200 relative">
            <div id="sequences-container" class="space-y-2">
                <!-- Le sequenze verranno generate qui -->
            </div>
            <div class="flex justify-center mt-4">
                <button id="add-sequence-btn" class="bg-blue-600 text-white rounded-full p-2 hover:bg-blue-700 shadow-lg transition z-10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                </button>
            </div>
        </div>
    </div>
    
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, signOut, linkWithCredential } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, doc, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp, writeBatch, setDoc, getDocs, query, orderBy } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyAoSqwkSoatQLABaTL17EnU4pA40kcWonY",
            authDomain: "activaloop.firebaseapp.com",
            projectId: "activaloop",
            storageBucket: "activaloop.firebasestorage.app",
            messagingSenderId: "5835049539",
            appId: "1:5835049539:web:2f21359a22019414a762f6"
        };
        
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        let userId = null;
        let unsubscribeFromSequences;
        let exerciseUnsubscribers = new Map();
        let eventDetailsToSave = null;
        
        let tokenClient;
        let gapiReady = false;
        let gisReady = false;
        
        const GOOGLE_CLIENT_ID = "508054707957-lb81rgk20vk0vr7bkkufsd83m80l5338.apps.googleusercontent.com"; // IMPORTANTE: Sostituire

        document.addEventListener('DOMContentLoaded', () => {
            const authContainer = document.getElementById('auth-container');
            const titleEl = document.getElementById('exercise-title');
            const countdownContainer = document.getElementById('countdown-container');
            const startPauseBtn = document.getElementById('start-pause-btn');
            const nextBtn = document.getElementById('next-btn');
            const backBtn = document.getElementById('back-btn');
            const nextExerciseLabel = document.getElementById('next-exercise-label');
            const sequencesContainer = document.getElementById('sequences-container');
            const addSequenceBtn = document.getElementById('add-sequence-btn');
            const loadingOverlay = document.getElementById('loading-overlay');
            const loadingText = document.getElementById('loading-text');

            let allSequences = [];
            let currentExerciseIndex = 0;
            let timeLeft = 0;
            let timerInterval = null;
            let isPaused = true;
            let isBreakTime = false;
            let commentTimeout = null;
            let wakeLock = null;
            
            const pencilIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/><path d="m15 5 4 4"/></svg>`;
            const checkIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>`;
            const endSound = new Audio('data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YS9vT18DAAAAAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5enx9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==');
            
            backBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>`;
            nextBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>`;

            const requestWakeLock = async () => { /* ... ( unchanged ) ... */ };
            const releaseWakeLock = async () => { /* ... ( unchanged ) ... */ };
            const speakText = (text) => { /* ... ( unchanged ) ... */ };
            const updateAuthUI = (user) => { /* ... ( unchanged ) ... */ };
            const signInWithGoogle = async () => { /* ... ( unchanged ) ... */ };
            const formatTime = (seconds) => `${String(Math.floor(seconds / 60)).padStart(2, '0')}:${String(seconds % 60).padStart(2, '0')}`;
            const getActiveSequence = () => allSequences.find(s => s.isActive);
            
            const resetTimerUI = () => {
                countdownContainer.innerHTML = `<p id="countdown-display" class="text-7xl font-bold text-blue-600">${formatTime(0)}</p>`;
                updateUI();
            };

            const updateUI = () => {
                const activeSequence = getActiveSequence();
                if (!activeSequence || !activeSequence.exercises || activeSequence.exercises.length === 0) {
                     titleEl.textContent = activeSequence ? activeSequence.title : "ActivaLoop";
                     const cd = document.getElementById('countdown-display');
                     if(cd) cd.textContent = formatTime(0);
                     nextExerciseLabel.textContent = "";
                     startPauseBtn.textContent = 'START';
                     return;
                };

                const countdownDisplay = document.getElementById('countdown-display');
                if(!countdownDisplay) return;

                if (isBreakTime) {
                    titleEl.textContent = "Pausa";
                    countdownDisplay.classList.remove('text-blue-600');
                    countdownDisplay.classList.add('text-green-600');
                    nextExerciseLabel.textContent = activeSequence.exercises[currentExerciseIndex + 1]?.title || 'Ricomincia';
                } else {
                    const exercise = activeSequence.exercises[currentExerciseIndex];
                    if (!exercise) return;
                    titleEl.textContent = exercise.title;
                    countdownDisplay.classList.remove('text-green-600');
                    countdownDisplay.classList.add('text-blue-600');
                    nextExerciseLabel.textContent = activeSequence.exercises[currentExerciseIndex + 1]?.title || 'Ricomincia';
                }
                
                countdownDisplay.textContent = formatTime(timeLeft);
                startPauseBtn.textContent = isPaused ? 'START' : 'PAUSE';
                backBtn.style.visibility = currentExerciseIndex > 0 ? 'visible' : 'hidden';
                nextBtn.style.visibility = currentExerciseIndex < activeSequence.exercises.length - 1 ? 'visible' : 'hidden';
            };

            const setupExercise = (index, shouldSpeak = false) => {
                resetTimerUI(); 
                const activeSequence = getActiveSequence();
                if (!activeSequence || !activeSequence.exercises || activeSequence.exercises.length === 0 || index >= activeSequence.exercises.length || index < 0) return;
                
                window.speechSynthesis.cancel();
                if (commentTimeout) clearTimeout(commentTimeout);
                
                isBreakTime = false;
                currentExerciseIndex = index;
                const currentExercise = activeSequence.exercises[currentExerciseIndex];
                timeLeft = currentExercise?.duration || 0;
                updateUI();
                
                if (shouldSpeak && activeSequence.settings.speechEnabled) {
                    speakText(currentExercise.title);
                    if (activeSequence.settings.commentSpeechEnabled && currentExercise.comment && currentExercise.comment.trim() !== '') {
                        commentTimeout = setTimeout(() => {
                           if (!isPaused) speakText(currentExercise.comment);
                        }, 3000);
                    }
                }
            };

            const pauseTimer = async () => { /* ... ( unchanged ) ... */ };
            const startTimer = async () => { /* ... ( unchanged ) ... */ };
            const handleStartPauseClick = async () => { /* ... ( unchanged ) ... */ };
            const handleNextClick = async () => { /* ... ( unchanged ) ... */ };
            const handleBackClick = async () => { /* ... ( unchanged ) ... */ };
            const migrateOldData = async () => { /* ... ( unchanged ) ... */ };
            const setupSequencesListener = () => { /* ... ( unchanged ) ... */ };
            const setupExercisesListener = (sequenceId) => { /* ... ( unchanged ) ... */ };
            const renderSequencesUI = () => { /* ... ( unchanged ) ... */ };
            const renderExerciseList = (container, exercises) => { /* ... ( unchanged ) ... */ };
            const updateSetting = async (sequenceId, settingKey, value) => { /* ... ( unchanged ) ... */ };
            const handleAddSequence = async () => { /* ... ( unchanged ) ... */ };
            const handleActivateSequence = async (sequenceIdToActivate) => { /* ... ( unchanged ) ... */ };
            const showConfirmationModal = (message, onConfirm, isAlert = false) => {
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
                
                const buttonsHTML = isAlert 
                    ? `<button id="modal-ok" class="px-4 py-2 rounded-md text-white bg-blue-600 hover:bg-blue-700">OK</button>`
                    : `<button id="modal-cancel" class="px-4 py-2 rounded-md text-gray-700 bg-gray-200 hover:bg-gray-300">Annulla</button>
                       <button id="modal-confirm" class="px-4 py-2 rounded-md text-white bg-red-600 hover:bg-red-700">Conferma</button>`;

                modal.innerHTML = `
                    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm mx-4">
                        <p class="text-gray-800 mb-4">${message}</p>
                        <div class="flex justify-end space-x-2">
                           ${buttonsHTML}
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);

                const closeModal = () => document.body.removeChild(modal);
                
                if (isAlert) {
                    document.getElementById('modal-ok').addEventListener('click', closeModal);
                } else {
                    document.getElementById('modal-confirm').addEventListener('click', () => {
                        onConfirm();
                        closeModal();
                    });
                    document.getElementById('modal-cancel').addEventListener('click', closeModal);
                }
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) closeModal();
                });
            };
            const handleDeleteSequence = async (sequenceId) => { /* ... ( unchanged ) ... */ };
            const handleSequenceCompletion = (sequence) => { /* ... ( unchanged ) ... */ };

            const handleCalendarSaveRequest = (startTime, endTime, title) => {
                if (!gisReady || !gapiReady) {
                    showConfirmationModal("L'API di Google Calendar si sta inizializzando, riprova tra qualche istante.", () => {}, true);
                    return;
                }
                eventDetailsToSave = { startTime, endTime, title };
                tokenClient.requestAccessToken({ prompt: '' });
            };

            const listUserCalendars = async () => {
                if (!eventDetailsToSave) return;
                try {
                    const response = await gapi.client.calendar.calendarList.list();
                    const calendars = response.result.items.filter(cal => cal.accessRole === 'owner' || cal.accessRole === 'writer');
                    showCalendarSelectModal(calendars, eventDetailsToSave);
                } catch (err) {
                    console.error("Errore nel caricare i calendari:", err);
                } finally {
                    eventDetailsToSave = null;
                }
            };
            
            const showCalendarSelectModal = (calendars, eventDetails) => {
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
                let options = calendars.map(cal => `<option value="${cal.id}">${cal.summary}</option>`).join('');
                modal.innerHTML = `
                    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm mx-4">
                        <p class="text-gray-800 mb-2 font-semibold">Scegli un calendario</p>
                        <select id="calendar-select" class="w-full p-2 border rounded-md mb-4">${options}</select>
                        <div class="flex justify-end space-x-2">
                            <button id="modal-cancel" class="px-4 py-2 rounded-md text-gray-700 bg-gray-200 hover:bg-gray-300">Annulla</button>
                            <button id="modal-confirm" class="px-4 py-2 rounded-md text-white bg-blue-600 hover:bg-blue-700">Salva Evento</button>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);

                const closeModal = () => document.body.removeChild(modal);

                document.getElementById('modal-confirm').addEventListener('click', () => {
                    const calendarId = document.getElementById('calendar-select').value;
                    createCalendarEvent(calendarId, eventDetails);
                    closeModal();
                });
                document.getElementById('modal-cancel').addEventListener('click', closeModal);
            };

            const createCalendarEvent = async (calendarId, {startTime, endTime, title}) => {
                const event = {
                    'summary': title,
                    'start': { 'dateTime': startTime.toISOString() },
                    'end': { 'dateTime': endTime.toISOString() }
                };
                try {
                    await gapi.client.calendar.events.insert({
                        'calendarId': calendarId,
                        'resource': event
                    });
                    titleEl.textContent = 'Evento Salvato!';
                } catch (err) {
                     titleEl.textContent = 'Errore Salvataggio';
                     console.error("Errore nel creare l'evento:", err);
                }
                 setTimeout(resetTimerUI, 3000);
            };

            const initializeGoogleApis = () => {
                const gapiScript = document.createElement('script');
                gapiScript.src = 'https://apis.google.com/js/api.js';
                gapiScript.async = true;
                gapiScript.defer = true;
                gapiScript.onload = () => window.gapiLoaded();
                document.body.appendChild(gapiScript);

                const gisScript = document.createElement('script');
                gisScript.src = 'https://accounts.google.com/gsi/client';
                gisScript.async = true;
                gisScript.defer = true;
                gisScript.onload = () => window.gisLoaded();
                document.body.appendChild(gisScript);
            };

            onAuthStateChanged(auth, (user) => {
                if (user) {
                    userId = user.uid;
                    updateAuthUI(user);
                    setupSequencesListener();
                    initializeGoogleApis();
                } else {
                    signInAnonymously(auth).catch(error => console.error("Anonymous sign-in error:", error));
                }
            });

            startPauseBtn.addEventListener('click', handleStartPauseClick);
            nextBtn.addEventListener('click', handleNextClick);
            backBtn.addEventListener('click', handleBackClick);
            addSequenceBtn.addEventListener('click', handleAddSequence);
            
            document.addEventListener('google-token-received', async (e) => {
                const tokenResponse = e.detail;
                gapi.client.setToken(tokenResponse);
                await listUserCalendars();
            });

            sequencesContainer.addEventListener('click', async (e) => { /* ... ( unchanged ) ... */ });
            sequencesContainer.addEventListener('change', async (e) => { /* ... ( unchanged ) ... */ });
            
            const handleVisibilityChange = async () => {
                if (wakeLock !== null && document.visibilityState === 'visible') {
                   await requestWakeLock();
                }
            };
            document.addEventListener('visibilitychange', handleVisibilityChange);

            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => navigator.serviceWorker.register('sw.js').then(reg => console.log('SW registrato'), err => console.log('Errore SW:', err)));
            }
        });
    </script>
</body>
</html>

