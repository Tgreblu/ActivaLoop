<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Palming App</title>
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#2563eb"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type=number] { -moz-appearance: textfield; }
        /* Stile per un leggero feedback durante il caricamento */
        #loading-overlay {
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(255, 255, 255, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
            transition: opacity 0.3s;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div id="app-container" class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200 relative" style="width: 600px; height: 400px;">
        <!-- Overlay di Caricamento -->
        <div id="loading-overlay">
            <p class="text-gray-600">Sincronizzazione dati...</p>
        </div>

        <div class="flex flex-col h-full">
            <!-- Sezione Principale del Timer -->
            <div class="text-center flex-grow">
                <h1 id="exercise-title" class="text-3xl font-bold text-gray-800 mb-4 h-16 flex items-center justify-center"></h1>
                <p id="countdown-display" class="text-7xl font-bold text-blue-600 mb-6">00:00</p>
                <div class="flex justify-center items-center space-x-4 mb-4">
                    <button id="back-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                    <button id="start-pause-btn" class="w-32 text-xl font-semibold py-3 px-6 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-200 shadow-md"></button>
                    <button id="next-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                </div>
                <p class="text-sm text-gray-500 h-5">Prossimo: <span id="next-exercise-label"></span></p>
            </div>

            <!-- Sezione Modificabile (Comprimibile) -->
            <div class="flex-shrink-0">
                <details id="details-section" class="bg-gray-50 rounded-lg border">
                    <summary class="cursor-pointer p-2 text-sm font-medium text-gray-700 list-none flex justify-between items-center">
                        <span>Modifica Sequenza Esercizi</span>
                        <svg class="w-4 h-4 transition-transform duration-200 transform details-arrow" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
                    </summary>
                    <style> details[open] .details-arrow { transform: rotate(180deg); } </style>
                    <div id="exercise-list" class="p-3 border-t max-h-48 overflow-y-auto"></div>
                    <div class="p-2 border-t bg-gray-100 rounded-b-lg">
                        <button id="add-exercise-btn" class="w-full flex items-center justify-center py-1 text-sm text-blue-600 hover:bg-blue-100 rounded-md"></button>
                    </div>
                </details>
            </div>
        </div>
    </div>

    <!-- Importazione dei moduli Firebase -->
    <script type="module">
        // Importa le funzioni necessarie dai moduli Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, doc, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp, getDocs, writeBatch } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        // --- Variabili Globali Fornite dall'Ambiente ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        // --- Inizializzazione Firebase ---
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        let userId = null;
        let exercisesCollectionRef;

        document.addEventListener('DOMContentLoaded', () => {
            // --- Elementi del DOM ---
            const titleEl = document.getElementById('exercise-title');
            const countdownEl = document.getElementById('countdown-display');
            const startPauseBtn = document.getElementById('start-pause-btn');
            const nextBtn = document.getElementById('next-btn');
            const backBtn = document.getElementById('back-btn');
            const nextExerciseLabel = document.getElementById('next-exercise-label');
            const exerciseListContainer = document.getElementById('exercise-list');
            const addExerciseBtn = document.getElementById('add-exercise-btn');
            const detailsSection = document.getElementById('details-section');
            const loadingOverlay = document.getElementById('loading-overlay');

            // --- Stato dell'Applicazione ---
            let exercises = []; // Ora viene caricato da Firestore
            let currentExerciseIndex = 0;
            let timeLeft = 0;
            let timerInterval = null;
            let isPaused = true;
            let unsubscribeFromExercises; // Per la disconnessione dal listener di Firestore

            // --- Suono ---
            const endSound = new Audio('data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YS9vT18DAAAAAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5enx9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==');
            
            // --- Setup UI Iniziale ---
            backBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>`;
            nextBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>`;
            addExerciseBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg><span class="ml-1">Aggiungi Riga</span>`;


            // --- Funzioni UtilitÃ  ---
            const formatTime = (seconds) => {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
            };

            // --- Funzioni Principali ---
            const updateUI = () => {
                if (exercises.length === 0) return;
                const exercise = exercises[currentExerciseIndex];
                if (!exercise) return;

                titleEl.textContent = exercise.title;
                countdownEl.textContent = formatTime(timeLeft);
                const nextExercise = exercises[currentExerciseIndex + 1];
                nextExerciseLabel.textContent = nextExercise ? nextExercise.title : 'Ricomincia';
                startPauseBtn.textContent = isPaused ? 'START' : 'PAUSE';
                backBtn.style.visibility = currentExerciseIndex > 0 ? 'visible' : 'hidden';
                nextBtn.style.visibility = currentExerciseIndex < exercises.length - 1 ? 'visible' : 'hidden';
            };

            const setupExercise = (index) => {
                if (exercises.length === 0) return;
                currentExerciseIndex = index;
                const exercise = exercises[currentExerciseIndex];
                if (exercise) {
                    timeLeft = exercise.duration;
                }
                updateUI();
            };

            // --- Controlli Timer ---
            const pauseTimer = () => {
                isPaused = true;
                if (timerInterval) clearInterval(timerInterval);
                timerInterval = null;
                updateUI();
            };

            const startTimer = () => {
                isPaused = false;
                updateUI();
                timerInterval = setInterval(() => {
                    timeLeft--;
                    countdownEl.textContent = formatTime(timeLeft);
                    if (timeLeft <= 0) {
                        if (endSound?.play) endSound.play().catch(e => console.error("Errore audio:", e));
                        if (currentExerciseIndex < exercises.length - 1) {
                            setupExercise(currentExerciseIndex + 1);
                        } else {
                            pauseTimer();
                        }
                    }
                }, 1000);
            };

            const handleStartPauseClick = () => {
                if (detailsSection.open || exercises.length === 0) return;
                if (isPaused && timeLeft <= 0 && currentExerciseIndex >= exercises.length - 1) {
                    setupExercise(0);
                }
                isPaused ? startTimer() : pauseTimer();
            };

            // --- Navigazione ---
            const handleNextClick = () => {
                pauseTimer();
                if (currentExerciseIndex < exercises.length - 1) setupExercise(currentExerciseIndex + 1);
            };
            const handleBackClick = () => {
                pauseTimer();
                if (currentExerciseIndex > 0) setupExercise(currentExerciseIndex - 1);
            };

            // --- Gestione Dati Firestore ---
            const createDefaultExercises = async () => {
                const defaultExercises = [
                    { title: "Fai palming con le mani calde", duration: 12, createdAt: new Date() },
                    { title: "Prossimo esercizio...", duration: 10, createdAt: new Date() },
                    { title: "Guarda in su", duration: 12, createdAt: new Date() },
                    { title: "Guarda in giÃ¹", duration: 7, createdAt: new Date() },
                    { title: "Guarda dove vuoi", duration: 8, createdAt: new Date() }
                ];
                const batch = writeBatch(db);
                defaultExercises.forEach(ex => {
                    const docRef = doc(exercisesCollectionRef);
                    batch.set(docRef, ex);
                });
                await batch.commit();
            };

            const setupFirestoreListener = () => {
                if (unsubscribeFromExercises) unsubscribeFromExercises(); // Rimuove listener precedente
                
                exercisesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/exercises`);

                unsubscribeFromExercises = onSnapshot(exercisesCollectionRef, async (snapshot) => {
                    if (snapshot.empty) {
                        await createDefaultExercises();
                        return; // Il listener si riattiverÃ  con i nuovi dati
                    }

                    const serverExercises = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    // Ordina per data di creazione per mantenere l'ordine
                    exercises = serverExercises.sort((a, b) => a.createdAt.toMillis() - b.createdAt.toMillis());
                    
                    renderExerciseList();
                    if (isPaused) { // Aggiorna l'UI solo se il timer Ã¨ fermo
                        setupExercise(currentExerciseIndex);
                    }
                    loadingOverlay.style.opacity = '0';
                    loadingOverlay.style.pointerEvents = 'none';
                });
            };

            // --- Gestione Lista Modificabile (con Firestore) ---
            const renderExerciseList = () => {
                exerciseListContainer.innerHTML = '';
                exercises.forEach((exercise) => {
                    const row = document.createElement('div');
                    row.className = 'flex items-center space-x-2 mb-2';
                    row.innerHTML = `
                        <input type="text" value="${exercise.title}" data-id="${exercise.id}" data-field="title" class="flex-grow p-1 border rounded-md text-sm">
                        <input type="number" value="${exercise.duration}" data-id="${exercise.id}" data-field="duration" class="w-16 p-1 border rounded-md text-sm text-center">
                        <button data-id="${exercise.id}" class="delete-btn p-1 text-red-500 hover:bg-red-100 rounded-full">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                        </button>`;
                    exerciseListContainer.appendChild(row);
                });
            };

            const updateExerciseInFirestore = async (e) => {
                const id = e.target.dataset.id;
                const field = e.target.dataset.field;
                const value = field === 'duration' ? parseInt(e.target.value) || 0 : e.target.value;
                const docRef = doc(exercisesCollectionRef, id);
                await updateDoc(docRef, { [field]: value });
            };

            const handleAddRow = async () => {
                await addDoc(exercisesCollectionRef, { title: 'Nuovo Esercizio', duration: 10, createdAt: serverTimestamp() });
            };

            const handleDeleteRow = async (id) => {
                await deleteDoc(doc(exercisesCollectionRef, id));
            };

            // --- Autenticazione e Inizializzazione ---
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    setupFirestoreListener();
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Errore di autenticazione:", error);
                        loadingOverlay.innerHTML = "<p class='text-red-500'>Errore di autenticazione</p>";
                    }
                }
            });

            // --- Event Listeners ---
            startPauseBtn.addEventListener('click', handleStartPauseClick);
            nextBtn.addEventListener('click', handleNextClick);
            backBtn.addEventListener('click', handleBackClick);
            addExerciseBtn.addEventListener('click', handleAddRow);
            
            exerciseListContainer.addEventListener('change', (e) => {
                if (e.target.matches('input')) updateExerciseInFirestore(e);
            });
            
            exerciseListContainer.addEventListener('click', (e) => {
                const deleteButton = e.target.closest('.delete-btn');
                if (deleteButton) handleDeleteRow(deleteButton.dataset.id);
            });
            
            detailsSection.addEventListener('toggle', () => {
                if (detailsSection.open) pauseTimer();
            });

            // Registrazione Service Worker
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('sw.js').then(reg => console.log('SW registrato'), err => console.log('Errore SW:', err));
                });
            }
        });
    </script>
</body>
</html>
