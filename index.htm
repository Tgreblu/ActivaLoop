<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ActivaLoop</title>
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#2563eb"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type=number] { -moz-appearance: textfield; }
        #loading-overlay {
            position: absolute; top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(255, 255, 255, 0.8); display: flex;
            align-items: center; justify-content: center; z-index: 10;
            transition: opacity 0.3s;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div id="app-container" class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200 relative" style="width: 600px; height: 400px;">
        <div id="loading-overlay">
            <p id="loading-text" class="text-gray-600">Sincronizzazione dati...</p>
        </div>

        <div id="auth-container" class="absolute top-4 right-4 text-sm"></div>

        <div class="flex flex-col h-full">
            <div class="text-center flex-grow pt-8">
                <h1 id="exercise-title" class="text-3xl font-bold text-gray-800 mb-4 h-16 flex items-center justify-center"></h1>
                <p id="countdown-display" class="text-7xl font-bold text-blue-600 mb-6">00:00</p>
                <div class="flex justify-center items-center space-x-4 mb-4">
                    <button id="back-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                    <button id="start-pause-btn" class="w-32 text-xl font-semibold py-3 px-6 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-200 shadow-md"></button>
                    <button id="next-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200"></button>
                </div>
                <p class="text-sm text-gray-500 h-5">Prossimo: <span id="next-exercise-label"></span></p>
            </div>

            <div class="flex-shrink-0">
                <details id="details-section" class="bg-gray-50 rounded-lg border">
                    <summary class="cursor-pointer p-2 text-sm font-medium text-gray-700 list-none flex justify-between items-center">
                        <span>Modifica Sequenza Esercizi</span>
                        <svg class="w-4 h-4 transition-transform duration-200 transform details-arrow" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
                    </summary>
                    <style> details[open] .details-arrow { transform: rotate(180deg); } </style>
                    
                    <div class="p-3 border-t flex justify-between items-center">
                        <label for="speech-toggle" class="text-sm font-medium text-gray-700">Leggi titoli esercizi</label>
                        <label for="speech-toggle" class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="speech-toggle" class="sr-only peer" checked>
                            <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-2 peer-focus:ring-blue-300 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        </label>
                    </div>

                    <div id="exercise-list" class="p-3 border-t max-h-48 overflow-y-auto"></div>
                    <div class="p-2 border-t bg-gray-100 rounded-b-lg">
                        <button id="add-exercise-btn" class="w-full flex items-center justify-center py-1 text-sm text-blue-600 hover:bg-blue-100 rounded-md"></button>
                    </div>
                </details>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, signOut, linkWithCredential } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, doc, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp, writeBatch, setDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyAoSqwkSoatQLABaTL17EnU4pA40kcWonY",
            authDomain: "activaloop.firebaseapp.com",
            projectId: "activaloop",
            storageBucket: "activaloop.firebasestorage.app",
            messagingSenderId: "5835049539",
            appId: "1:5835049539:web:2f21359a22019414a762f6"
        };
        
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        let userId = null;
        let unsubscribeFromExercises, unsubscribeFromSettings;

        document.addEventListener('DOMContentLoaded', () => {
            const authContainer = document.getElementById('auth-container');
            const titleEl = document.getElementById('exercise-title');
            const countdownEl = document.getElementById('countdown-display');
            const startPauseBtn = document.getElementById('start-pause-btn');
            const nextBtn = document.getElementById('next-btn');
            const backBtn = document.getElementById('back-btn');
            const nextExerciseLabel = document.getElementById('next-exercise-label');
            const exerciseListContainer = document.getElementById('exercise-list');
            const addExerciseBtn = document.getElementById('add-exercise-btn');
            const detailsSection = document.getElementById('details-section');
            const loadingOverlay = document.getElementById('loading-overlay');
            const loadingText = document.getElementById('loading-text');
            const speechToggle = document.getElementById('speech-toggle');

            let exercises = [];
            let currentExerciseIndex = 0;
            let timeLeft = 0;
            let timerInterval = null;
            let isPaused = true;
            let isSpeechEnabled = true;
            let isBreakTime = false;

            const endSound = new Audio('data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YS9vT18DAAAAAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5enx9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==');
            
            backBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>`;
            nextBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>`;
            addExerciseBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg><span class="ml-1">Aggiungi Riga</span>`;

            const speakText = (text) => {
                if (!isSpeechEnabled || !('speechSynthesis' in window)) return;
                window.speechSynthesis.cancel();
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'it-IT';
                utterance.rate = 0.9;
                window.speechSynthesis.speak(utterance);
            };

            const updateAuthUI = (user) => {
                authContainer.innerHTML = '';
                if (user && !user.isAnonymous) {
                    authContainer.innerHTML = `<div class="flex items-center space-x-2"><span class="text-gray-600">Ciao, ${user.displayName.split(' ')[0]}</span><button id="logout-btn" class="font-semibold text-blue-600 hover:underline">Esci</button></div>`;
                    document.getElementById('logout-btn').addEventListener('click', () => signOut(auth));
                } else {
                    authContainer.innerHTML = `<button id="login-btn" class="bg-white border border-gray-300 text-gray-700 px-3 py-1 rounded-md hover:bg-gray-50">Accedi con Google</button>`;
                    document.getElementById('login-btn').addEventListener('click', signInWithGoogle);
                }
            };

            const signInWithGoogle = async () => {
                const provider = new GoogleAuthProvider();
                try {
                    const result = await signInWithPopup(auth, provider);
                    if (auth.currentUser && auth.currentUser.isAnonymous) {
                        const credential = GoogleAuthProvider.credentialFromResult(result);
                        await linkWithCredential(auth.currentUser, credential);
                    }
                } catch (error) {
                    console.error("Errore durante l'accesso con Google:", error);
                }
            };
            
            const formatTime = (seconds) => `${String(Math.floor(seconds / 60)).padStart(2, '0')}:${String(seconds % 60).padStart(2, '0')}`;

            const updateUI = () => {
                if (exercises.length === 0) return;
                
                if (isBreakTime) {
                    titleEl.textContent = "Pausa";
                    countdownEl.classList.remove('text-blue-600');
                    countdownEl.classList.add('text-green-600');
                    nextExerciseLabel.textContent = exercises[currentExerciseIndex + 1]?.title || 'Ricomincia';
                } else {
                    const exercise = exercises[currentExerciseIndex];
                    if (!exercise) return;
                    titleEl.textContent = exercise.title;
                    countdownEl.classList.remove('text-green-600');
                    countdownEl.classList.add('text-blue-600');
                    nextExerciseLabel.textContent = exercises[currentExerciseIndex + 1]?.title || 'Ricomincia';
                }
                
                countdownEl.textContent = formatTime(timeLeft);
                startPauseBtn.textContent = isPaused ? 'START' : 'PAUSE';
                backBtn.style.visibility = currentExerciseIndex > 0 ? 'visible' : 'hidden';
                nextBtn.style.visibility = currentExerciseIndex < exercises.length - 1 ? 'visible' : 'hidden';
            };

            const setupExercise = (index, shouldSpeak = false) => {
                if (exercises.length === 0 || index >= exercises.length || index < 0) return;
                isBreakTime = false;
                currentExerciseIndex = index;
                const currentExercise = exercises[currentExerciseIndex];
                timeLeft = currentExercise?.duration || 0;
                updateUI();
                if (shouldSpeak) speakText(currentExercise.title);
            };

            const pauseTimer = () => {
                isPaused = true;
                if (timerInterval) clearInterval(timerInterval);
                timerInterval = null;
                updateUI();
            };

            const startTimer = () => {
                if (isPaused && !isBreakTime && timeLeft === (exercises[currentExerciseIndex]?.duration || 0)) {
                    speakText(exercises[currentExerciseIndex].title);
                }
                isPaused = false;
                updateUI();
                timerInterval = setInterval(() => {
                    timeLeft--;
                    
                    if (timeLeft < 0) {
                        if(endSound?.play) endSound.play().catch(e => console.error("Errore audio:", e));
                        
                        if (!isBreakTime && currentExerciseIndex < exercises.length - 1) {
                            isBreakTime = true;
                            timeLeft = 5;
                            updateUI();
                        } else {
                            if (currentExerciseIndex < exercises.length - 1) {
                                setupExercise(currentExerciseIndex + 1, true);
                            } else {
                                pauseTimer();
                                isBreakTime = false;
                                return;
                            }
                        }
                    } else {
                        updateUI();
                    }
                }, 1000);
            };

            const handleStartPauseClick = () => {
                if (detailsSection.open || exercises.length === 0) return;
                if (isPaused && timeLeft <= 0 && currentExerciseIndex >= exercises.length - 1 && !isBreakTime) {
                    setupExercise(0, true); 
                }
                isPaused ? startTimer() : pauseTimer();
            };

            const handleNextClick = () => {
                pauseTimer();
                isBreakTime = false;
                if (currentExerciseIndex < exercises.length - 1) {
                    setupExercise(currentExerciseIndex + 1, true);
                }
            };

            const handleBackClick = () => {
                pauseTimer();
                isBreakTime = false;
                if (currentExerciseIndex > 0) {
                    setupExercise(currentExerciseIndex - 1, true);
                }
            };

            const createDefaultExercises = async () => {
                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                const defaultExercises = [
                    { title: "Fai palming con le mani calde", duration: 12 },
                    { title: "Prossimo esercizio...", duration: 10 },
                    { title: "Guarda in su", duration: 12 },
                    { title: "Guarda in giù", duration: 7 },
                    { title: "Guarda dove vuoi", duration: 8 }
                ];
                for (const ex of defaultExercises) {
                    await addDoc(exercisesCollectionRef, { ...ex, createdAt: serverTimestamp() });
                }
            };

            const setupSettingsListener = () => {
                if (unsubscribeFromSettings) unsubscribeFromSettings();
                const settingsDocRef = doc(db, `users/${userId}/settings/main`);
                unsubscribeFromSettings = onSnapshot(settingsDocRef, (doc) => {
                    if (doc.exists() && typeof doc.data().speechEnabled === 'boolean') {
                        isSpeechEnabled = doc.data().speechEnabled;
                    } else {
                        isSpeechEnabled = true;
                    }
                    speechToggle.checked = isSpeechEnabled;
                });
            };

            const setupFirestoreListener = () => {
                if (unsubscribeFromExercises) unsubscribeFromExercises();
                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                
                unsubscribeFromExercises = onSnapshot(exercisesCollectionRef, 
                    async (snapshot) => {
                        if (snapshot.empty && userId) {
                            await createDefaultExercises();
                            return;
                        }
                        const serverExercises = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                        exercises = serverExercises.sort((a, b) => (a.createdAt?.toMillis() ?? 0) - (b.createdAt?.toMillis() ?? 0));
                        renderExerciseList();
                        if (isPaused) setupExercise(currentExerciseIndex, false);
                        loadingOverlay.style.opacity = '0';
                        loadingOverlay.style.pointerEvents = 'none';
                    },
                    (error) => {
                        console.error("Errore di Firestore:", error);
                        loadingText.textContent = "Errore di connessione al database.";
                        loadingText.classList.add('text-red-500');
                    }
                );
            };

            const renderExerciseList = () => {
                exerciseListContainer.innerHTML = '';
                exercises.forEach((exercise, index) => {
                    const row = document.createElement('div');
                    row.className = 'flex items-center space-x-1 mb-2';
                    row.innerHTML = `
                        <input type="text" value="${exercise.title}" data-id="${exercise.id}" data-field="title" class="flex-grow p-1 border rounded-md text-sm">
                        <input type="number" value="${exercise.duration}" data-id="${exercise.id}" data-field="duration" class="w-16 p-1 border rounded-md text-sm text-center">
                        
                        <button data-id="${exercise.id}" data-direction="up" class="move-btn p-1 text-gray-500 hover:bg-gray-200 rounded-full" ${index === 0 ? 'style="visibility: hidden;"' : ''}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="m18 15-6-6-6 6"/></svg>
                        </button>
                        <button data-id="${exercise.id}" data-direction="down" class="move-btn p-1 text-gray-500 hover:bg-gray-200 rounded-full" ${index === exercises.length - 1 ? 'style="visibility: hidden;"' : ''}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="m6 9 6 6 6-6"/></svg>
                        </button>
                        
                        <button data-id="${exercise.id}" class="delete-btn p-1 text-red-500 hover:bg-red-100 rounded-full">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                        </button>
                    `;
                    exerciseListContainer.appendChild(row);
                });
            };

            const updateExerciseInFirestore = async (e) => {
                const id = e.target.dataset.id;
                const field = e.target.dataset.field;
                const value = field === 'duration' ? parseInt(e.target.value) || 0 : e.target.value;
                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                await updateDoc(doc(exercisesCollectionRef, id), { [field]: value });
            };

            const handleAddRow = async () => {
                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                await addDoc(exercisesCollectionRef, { title: 'Nuovo Esercizio', duration: 10, createdAt: serverTimestamp() });
            };

            const handleDeleteRow = async (id) => {
                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                await deleteDoc(doc(exercisesCollectionRef, id));
            };

            const handleMoveExercise = async (id, direction) => {
                const currentIndex = exercises.findIndex(ex => ex.id === id);
                if (currentIndex === -1) return;

                const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
                if (targetIndex < 0 || targetIndex >= exercises.length) return;

                const exerciseToMove = exercises[currentIndex];
                const targetExercise = exercises[targetIndex];

                if (!exerciseToMove.createdAt || !targetExercise.createdAt) {
                    console.error("Timestamp mancante, impossibile riordinare.");
                    return;
                }

                const exercisesCollectionRef = collection(db, `users/${userId}/exercises`);
                const batch = writeBatch(db);
                
                const docToMoveRef = doc(exercisesCollectionRef, exerciseToMove.id);
                const targetDocRef = doc(exercisesCollectionRef, targetExercise.id);
                
                batch.update(docToMoveRef, { createdAt: targetExercise.createdAt });
                batch.update(targetDocRef, { createdAt: exerciseToMove.createdAt });
                
                try {
                    await batch.commit();
                } catch (error) {
                    console.error("Errore nel riordinare gli esercizi:", error);
                }
            };

            const updateSpeechSetting = async (isEnabled) => {
                if (!userId) return;
                const settingsDocRef = doc(db, `users/${userId}/settings/main`);
                await setDoc(settingsDocRef, { speechEnabled: isEnabled }, { merge: true });
            };

            onAuthStateChanged(auth, (user) => {
                if (user) {
                    userId = user.uid;
                    updateAuthUI(user);
                    setupFirestoreListener();
                    setupSettingsListener();
                } else {
                    signInAnonymously(auth).catch(error => {
                        console.error("Errore di accesso anonimo:", error);
                        loadingText.textContent = "Errore di autenticazione.";
                    });
                }
            });

            startPauseBtn.addEventListener('click', handleStartPauseClick);
            nextBtn.addEventListener('click', handleNextClick);
            backBtn.addEventListener('click', handleBackClick);
            addExerciseBtn.addEventListener('click', handleAddRow);
            speechToggle.addEventListener('change', () => updateSpeechSetting(speechToggle.checked));
            exerciseListContainer.addEventListener('change', (e) => e.target.matches('input') && updateExerciseInFirestore(e));
            
            exerciseListContainer.addEventListener('click', (e) => {
                const deleteBtn = e.target.closest('.delete-btn');
                if (deleteBtn) {
                    handleDeleteRow(deleteBtn.dataset.id);
                    return;
                }

                const moveBtn = e.target.closest('.move-btn');
                if (moveBtn) {
                    handleMoveExercise(moveBtn.dataset.id, moveBtn.dataset.direction);
                }
            });

            detailsSection.addEventListener('toggle', () => detailsSection.open && pauseTimer());

            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => navigator.serviceWorker.register('sw.js').then(reg => console.log('SW registrato'), err => console.log('Errore SW:', err)));
            }
        });
    </script>
</body>
</html>

