<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Palming App</title>
    <!-- Link al Manifest per la PWA -->
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#2563eb"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Stile per nascondere le frecce dell'input numerico */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div id="app-container" class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200" style="width: 600px; height: 400px;">
        <div class="flex flex-col h-full">
            <!-- Sezione Principale del Timer -->
            <div class="text-center flex-grow">
                <h1 id="exercise-title" class="text-3xl font-bold text-gray-800 mb-4 h-16 flex items-center justify-center"></h1>
                <p id="countdown-display" class="text-7xl font-bold text-blue-600 mb-6">00:00</p>
                <div class="flex justify-center items-center space-x-4 mb-4">
                    <button id="back-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
                    </button>
                    <button id="start-pause-btn" class="w-32 text-xl font-semibold py-3 px-6 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-200 shadow-md"></button>
                    <button id="next-btn" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 transition-all duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>
                    </button>
                </div>
                <p class="text-sm text-gray-500 h-5">Prossimo: <span id="next-exercise-label"></span></p>
            </div>

            <!-- Sezione Modificabile (Comprimibile) -->
            <div class="flex-shrink-0">
                <details id="details-section" class="bg-gray-50 rounded-lg border">
                    <summary class="cursor-pointer p-2 text-sm font-medium text-gray-700 list-none flex justify-between items-center">
                        <span>Modifica Sequenza Esercizi</span>
                        <svg class="w-4 h-4 transition-transform duration-200 transform details-arrow" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
                    </summary>
                    <style>
                        details[open] .details-arrow { transform: rotate(180deg); }
                    </style>
                    <div id="exercise-list" class="p-3 border-t max-h-48 overflow-y-auto">
                        <!-- La lista verrà generata dinamicamente qui -->
                    </div>
                    <div class="p-2 border-t bg-gray-100 rounded-b-lg">
                        <button id="add-exercise-btn" class="w-full flex items-center justify-center py-1 text-sm text-blue-600 hover:bg-blue-100 rounded-md">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                            <span class="ml-1">Aggiungi Riga</span>
                        </button>
                    </div>
                </details>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Elementi del DOM ---
            const titleEl = document.getElementById('exercise-title');
            const countdownEl = document.getElementById('countdown-display');
            const startPauseBtn = document.getElementById('start-pause-btn');
            const nextBtn = document.getElementById('next-btn');
            const backBtn = document.getElementById('back-btn');
            const nextExerciseLabel = document.getElementById('next-exercise-label');
            const exerciseListContainer = document.getElementById('exercise-list');
            const addExerciseBtn = document.getElementById('add-exercise-btn');
            const detailsSection = document.getElementById('details-section');

            // --- Stato dell'Applicazione ---
            let exercises = [
                { title: "Fai palming con le mani calde", duration: 12 },
                { title: "Prossimo esercizio...", duration: 10 },
                { title: "Guarda in su", duration: 12 },
                { title: "Guarda in giù", duration: 7 },
                { title: "Guarda dove vuoi", duration: 8 }
            ];

            let currentExerciseIndex = 0;
            let timeLeft = 0;
            let timerInterval = null;
            let isPaused = true;

            // --- Suono ---
            const endSound = new Audio('data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YS9vT18DAAAAAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5enx9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==');

            // --- Funzioni Utilità ---
            const formatTime = (seconds) => {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
            };

            // --- Funzioni Principali ---
            const updateUI = () => {
                const exercise = exercises[currentExerciseIndex];
                if (!exercise) return;

                titleEl.textContent = exercise.title;
                countdownEl.textContent = formatTime(timeLeft);

                const nextExercise = exercises[currentExerciseIndex + 1];
                nextExerciseLabel.textContent = nextExercise ? nextExercise.title : 'Fine';

                startPauseBtn.textContent = isPaused ? 'START' : 'PAUSE';
                
                backBtn.style.visibility = currentExerciseIndex > 0 ? 'visible' : 'hidden';
                nextBtn.style.visibility = currentExerciseIndex < exercises.length - 1 ? 'visible' : 'hidden';
            };

            const setupExercise = (index) => {
                pauseTimer();
                currentExerciseIndex = index;
                const exercise = exercises[currentExerciseIndex];
                if (exercise) {
                    timeLeft = exercise.duration;
                }
                updateUI();
            };

            // --- Controlli Timer ---
            const pauseTimer = () => {
                isPaused = true;
                if (timerInterval) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                }
                updateUI();
            };

            const startTimer = () => {
                if (timeLeft <= 0) return;
                isPaused = false;
                updateUI();

                timerInterval = setInterval(() => {
                    timeLeft--;
                    countdownEl.textContent = formatTime(timeLeft);

                    if (timeLeft <= 0) {
                        if (endSound && typeof endSound.play === 'function') {
                            endSound.play().catch(error => {
                                console.error("Errore durante la riproduzione del suono:", error);
                            });
                        }
                        nextExercise();
                    }
                }, 1000);
            };
            
            const handleStartPauseClick = () => {
                if(detailsSection.hasAttribute('open')) return;
                
                if (isPaused) {
                    startTimer();
                } else {
                    pauseTimer();
                }
            };
            
            // --- Navigazione ---
            const nextExercise = () => {
                if (currentExerciseIndex < exercises.length - 1) {
                    setupExercise(currentExerciseIndex + 1);
                } else {
                    pauseTimer();
                }
            };

            const backExercise = () => {
                if (currentExerciseIndex > 0) {
                    setupExercise(currentExerciseIndex - 1);
                }
            };

            // --- Gestione Lista Modificabile ---
            const renderExerciseList = () => {
                exerciseListContainer.innerHTML = '';
                exercises.forEach((exercise, index) => {
                    const row = document.createElement('div');
                    row.className = 'flex items-center space-x-2 mb-2';
                    row.innerHTML = `
                        <input type="text" value="${exercise.title}" data-index="${index}" data-field="title" class="flex-grow p-1 border rounded-md text-sm">
                        <input type="number" value="${exercise.duration}" data-index="${index}" data-field="duration" class="w-16 p-1 border rounded-md text-sm text-center">
                        <button data-index="${index}" class="delete-btn p-1 text-red-500 hover:bg-red-100 rounded-full">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                        </button>
                    `;
                    exerciseListContainer.appendChild(row);
                });
            };
            
            const updateExerciseFromInput = (e) => {
                const index = parseInt(e.target.dataset.index);
                const field = e.target.dataset.field;
                const value = field === 'duration' ? parseInt(e.target.value) || 0 : e.target.value;

                if (exercises[index] && exercises[index][field] !== undefined) {
                    exercises[index][field] = value;
                }
                
                if(index === currentExerciseIndex) {
                    setupExercise(currentExerciseIndex);
                }
            };

            const handleAddRow = () => {
                exercises.push({ title: 'Nuovo Esercizio', duration: 10 });
                renderExerciseList();
            };

            const handleDeleteRow = (index) => {
                exercises.splice(index, 1);
                renderExerciseList();
                if (currentExerciseIndex >= index) {
                   setupExercise(0);
                }
            };

            // --- Inizializzazione e Event Listeners ---
            const init = () => {
                renderExerciseList();
                setupExercise(0);
            };

            startPauseBtn.addEventListener('click', handleStartPauseClick);
            nextBtn.addEventListener('click', nextExercise);
            backBtn.addEventListener('click', backExercise);
            addExerciseBtn.addEventListener('click', handleAddRow);
            
            exerciseListContainer.addEventListener('change', (e) => {
                if (e.target.matches('input')) {
                    updateExerciseFromInput(e);
                }
            });
            
            exerciseListContainer.addEventListener('click', (e) => {
                const deleteButton = e.target.closest('.delete-btn');
                if (deleteButton) {
                    const index = parseInt(deleteButton.dataset.index);
                    handleDeleteRow(index);
                }
            });
            
            detailsSection.addEventListener('toggle', () => {
                if (detailsSection.hasAttribute('open')) {
                    pauseTimer();
                }
            });

            init();

            // --- Registrazione Service Worker per PWA ---
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('sw.js').then(registration => {
                        console.log('ServiceWorker registrato con successo:', registration);
                    }, err => {
                        console.log('Registrazione ServiceWorker fallita:', err);
                    });
                });
            }
        });
    </script>

</body>
</html>
